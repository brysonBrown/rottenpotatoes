<!-- Below is my chatGPT prompt to add the color changing buttons to the sorting-->

<!--
    Prompt:
    I want a button to change the color of a column in CSS. I provided the code in my `index.html.erb` and `_movie.html.erb` files. I want the button color change to reflect the 
    column sorting direction (ascending or descending) and apply distinct colors for each column. I want these color changes to happen based on the url. For example, sort_title_ascending has a url that ends with sort_title_ascending
    and sort_release_date_ascending has a url that ends with sort_release_date_ascending. Here is my code [long so I am commenting on changes]
    Prompt2: "It only works when I refresh the page. Make it work when the button is pressed even if the page is not refreshed"
    Prompt3: "Make the entire column the color and not just the column title"
    Prompt4: "Here is the java script that adds color to the columns. Make it add a carrot (^) for ascending and an astrick (*) for descending to the title
    of the sorted column."
    Contributing Prompts: I had to tell it to repeat itself on each step a dozen times with input on error messages/what I thought was wrong. The main prompts are
    the ones listed. 

    chatGPT additions include:
    - CSS updates for grid layout and column highlight colors.
    - JavaScript for dynamic highlighting based on sorting direction and adding a symbol.
    - Reformatting of table code

-->

<head>
    <title>Movies</title>
    <!-- CSS highlights from chatGPT, with some modified for better colors -->
    <style>
      /* CSS styles */
      table {
          border-collapse: collapse;
          width: 100%;
      }
      th, td {
          border: 2px solid black;
          text-align: center;
      }
      th {
          background-color: #f2f2f2;
      }
      .highlight-title-asc {
          background-color: lightgreen;
      }
      .highlight-title-desc {
          background-color: green;
      }
      .highlight-rating-asc {
          background-color: lightcoral;
      }
      .highlight-rating-desc {
          background-color: red;
      }
      .highlight-release_date-asc {
          background-color: orange;
      }
      .highlight-release_date-desc {
          background-color: blue;
      }
    </style>
</head>
<body style="background-color: lightblue">

    <h1  style="display: block; color: white; background-color: lightblue; border: 2px solid">Movies</h1>

    <table id="moviesTable">
        <thead>
          <tr>
              <th scope="col" data-column="title"><strong>Title</strong></th>
              <th scope="col" data-column="rating"><strong>Rating</strong></th>
              <th scope="col" data-column="release_date"><strong>Release Date</strong></th>
          </tr>
        </thead>
        <!-- chatGPT just reformatted this so that it called the movie file here inside of one table instead of outside of it-->
        <tbody>
          <% @movies.each do |movie| %>
            <%= render movie %>
          <% end %>
        </tbody>
    </table>

    <!-- These are the links -->
    <%= button_to "New movie", new_movie_path, method: :get %> <br>

    <!-- These are the buttons -->
    <%= button_to "Sort by Title Ascending", sort_title_ascending_path, method: :get %> <br>
    <%= button_to "Sort by Title Descending", sort_title_descending_path, method: :get %> <br>
    <%= button_to "Sort by Rating Ascending", sort_rating_ascending_path, method: :get %> <br>
    <%= button_to "Sort by Rating Descending", sort_rating_descending_path, method: :get %> <br>
    <%= button_to "Sort by Release Date Ascending", sort_release_date_ascending_path, method: :get %> <br>
    <%= button_to "Sort by Release Date Descending", sort_release_date_descending_path, method: :get %> <br>

    <!-- JavaScript from chatGPT, highlights columns on button push. Prompts at the top. I modified it so it would not highlight the header-->
    <!-- JavaScript code -->
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        function getSortingInfo() {
            const path = window.location.pathname;
            const match = path.match(/sort_(\w+)_([a-z]+)$/);
            if (match) {
                const column = match[1];
                const direction = match[2];
                return { column, direction };
            }
            return { column: null, direction: null };
        }
    
        function updateHighlight(column, direction) {
            let highlightClass = '';
            let sortSymbol = '';
            switch (column) {
                case 'title':
                    highlightClass = direction === 'ascending' ? 'highlight-title-asc' : 'highlight-title-desc';
                    sortSymbol = direction === 'ascending' ? ' ^' : ' *';
                    break;
                case 'rating':
                    highlightClass = direction === 'ascending' ? 'highlight-rating-asc' : 'highlight-rating-desc';
                    sortSymbol = direction === 'ascending' ? ' ^' : ' *';
                    break;
                case 'release_date':
                    highlightClass = direction === 'ascending' ? 'highlight-release_date-asc' : 'highlight-release_date-desc';
                    sortSymbol = direction === 'ascending' ? ' ^' : ' *';
                    break;
                default:
                    highlightClass = '';
                    sortSymbol = '';
            }
    
            // Remove existing highlights and symbols
            document.querySelectorAll('#moviesTable th').forEach(header => {
                header.className = header.className.replace(/highlight-\w+-\w+/g, ''); // Remove all highlight classes
                header.textContent = header.textContent.replace(/[\s^*]+$/, ''); // Remove existing symbols
            });
    
            document.querySelectorAll('#moviesTable td').forEach(cell => {
                cell.className = cell.className.replace(/highlight-\w+-\w+/g, ''); // Remove all highlight classes
            });
    
            // Apply new highlight
            if (highlightClass) {
                document.querySelectorAll(`#moviesTable th[data-column="${column}"]`).forEach(header => {
                    header.textContent += sortSymbol;
                });
    
                const columnIndex = [...document.querySelectorAll('#moviesTable th')].findIndex(th => th.dataset.column === column) + 1;
                document.querySelectorAll(`#moviesTable td:nth-child(${columnIndex})`).forEach(cell => {
                    cell.classList.add(highlightClass);
                });
            }
        }
    
        function applyHighlight() {
            const { column, direction } = getSortingInfo();
            updateHighlight(column, direction);
        }
    
        // Apply highlight on initial page load
        applyHighlight();
    
        // Handle URL changes manually if you use client-side routing or similar
        window.addEventListener('popstate', applyHighlight);
    
        // Handle AJAX navigation or URL changes
        document.addEventListener('click', function(event) {
            if (event.target.closest('button')) {
                // Assuming buttons trigger URL change or sorting
                setTimeout(applyHighlight, 100); // Adjust timeout if needed
            }
        });
    
        // Optional: Use MutationObserver to observe changes
        // Uncomment if needed
        // const observer = new MutationObserver(applyHighlight);
        // observer.observe(document.body, { subtree: true, childList: true });
    });
    </script>
    

</body>















