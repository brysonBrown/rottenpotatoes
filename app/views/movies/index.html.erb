<!-- Below is my chatGPT prompt to add the color changing buttons to the sorting-->

<!--
    Prompt:
    I want a button to change the color of a column in CSS. I provided the code in my `index.html.erb` and `_movie.html.erb` files. I wanted the button's color change to reflect the 
    column sorting direction (ascending or descending) and apply distinct colors for each column. Additionally, I wanted to restore the grid look that was originally present. Here is my code [long so I am commenting on changes]
    Prompt2: I had to then ask it to make sure that this worked when I pressed a button and not just on a page refresh abotu 4 times. 
    
    This solution includes:
    - CSS updates for grid layout and column highlight colors.
    - JavaScript for dynamic highlighting based on sorting direction.
-->

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movies</title>
    <!-- CSS highlights from chatGPT -->
    <style>
      /* CSS styles */
      table {
          border-collapse: collapse;
          width: 100%;
      }
      th, td {
          border: 2px solid black;
          text-align: center;
      }
      th {
          background-color: #f2f2f2;
      }
      .highlight-title-asc {
          background-color: lightgreen;
      }
      .highlight-title-desc {
          background-color: green;
      }
      .highlight-rating-asc {
          background-color: lightcoral;
      }
      .highlight-rating-desc {
          background-color: red;
      }
      .highlight-release_date-asc {
          background-color: lightblue;
      }
      .highlight-release_date-desc {
          background-color: blue;
      }
    </style>
</head>
<body>
    <p style="color: green"><%= notice %></p>

    <h1>Movies</h1>

    <table id="moviesTable">
        <thead>
          <tr>
              <th scope="col" data-column="title"><strong>Title</strong></th>
              <th scope="col" data-column="rating"><strong>Rating</strong></th>
              <th scope="col" data-column="release_date"><strong>Release Date</strong></th>
          </tr>
        </thead>
        <!-- chatGPT just reformatted this so that it called the movie file here inside of one table-->
        <tbody>
          <% @movies.each do |movie| %>
            <%= render movie %>
          <% end %>
        </tbody>
    </table>

    <%= link_to "New movie", new_movie_path %>

    <!-- Buttons -->
    <%= button_to "Sort by Title Ascending", sort_title_ascending_path, method: :get %> <br>
    <%= button_to "Sort by Title Descending", sort_title_descending_path, method: :get %> <br>
    <%= button_to "Sort by Rating Ascending", sort_rating_ascending_path, method: :get %> <br>
    <%= button_to "Sort by Rating Descending", sort_rating_descending_path, method: :get %> <br>
    <%= button_to "Sort by Release Date Ascending", sort_release_date_ascending_path, method: :get %> <br>
    <%= button_to "Sort by Release Date Descending", sort_release_date_descending_path, method: :get %> <br>

    <!-- JavaScript from chatGPT, highlights columns on button push.-->
    <!-- JavaScript code -->
      <script>
document.addEventListener('DOMContentLoaded', function() {
    function getSortingInfo() {
        const path = window.location.pathname;
        console.log('URL Path:', path); // Log URL path for debugging
        const match = path.match(/sort_(\w+)_([a-z]+)$/);
        if (match) {
            const column = match[1];
            const direction = match[2];
            console.log('Sorting Column:', column); // Log sorting column
            console.log('Sorting Direction:', direction); // Log sorting direction
            return { column, direction };
        }
        return { column: null, direction: null };
    }

    function updateHighlight(column, direction) {
        let highlightClass = '';
        switch (column) {
            case 'title':
                highlightClass = direction === 'ascending' ? 'highlight-title-asc' : 'highlight-title-desc';
                break;
            case 'rating':
                highlightClass = direction === 'ascending' ? 'highlight-rating-asc' : 'highlight-rating-desc';
                break;
            case 'release_date':
                highlightClass = direction === 'ascending' ? 'highlight-release_date-asc' : 'highlight-release_date-desc';
                break;
            default:
                highlightClass = '';
        }

        console.log('Highlight Class:', highlightClass);

        // Remove existing highlight classes from all column headers and cells
        document.querySelectorAll('#moviesTable th, #moviesTable td').forEach(cell => {
            cell.classList.remove('highlight-title-asc', 'highlight-title-desc', 'highlight-rating-asc', 'highlight-rating-desc', 'highlight-release_date-asc', 'highlight-release_date-desc');
        });

        // Apply the class to the appropriate column header and cells
        if (highlightClass) {
            // Highlight header
            document.querySelectorAll(`#moviesTable th[data-column="${column}"]`).forEach(header => {
                header.classList.add(highlightClass);
            });

            // Determine the column index
            const columnIndex = [...document.querySelectorAll('#moviesTable th')].findIndex(th => th.dataset.column === column) + 1;
            
            // Highlight column cells using nth-child
            document.querySelectorAll(`#moviesTable td:nth-child(${columnIndex})`).forEach(cell => {
                cell.classList.add(highlightClass);
            });
        }
    }

    function applyHighlight() {
        const { column, direction } = getSortingInfo();
        updateHighlight(column, direction);
    }

    // Apply highlight on initial page load
    applyHighlight();

    // Listen for URL changes using history events
    window.addEventListener('popstate', function() {
        applyHighlight();
    });

    // Optional: Use MutationObserver if URL changes dynamically without a full page reload
    const observer = new MutationObserver(() => {
        applyHighlight();
    });
    observer.observe(document, { subtree: true, childList: true });

    // Handle URL changes manually if you use client-side routing or similar
    window.addEventListener('load', applyHighlight);
});
</script>
</body>















